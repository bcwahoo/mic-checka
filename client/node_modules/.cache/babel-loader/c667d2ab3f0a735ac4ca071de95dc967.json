{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\BCWAHOO\\\\WorkSpace\\\\BootCamp\\\\Session\\\\wk21 - React\\\\readinglist-with-jwt-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\BCWAHOO\\\\WorkSpace\\\\BootCamp\\\\Session\\\\wk21 - React\\\\readinglist-with-jwt-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport axios from \"axios\";\nimport { Browser as JotBrowser } from 'jwt-jot';\nimport store from '../redux/store';\nimport { onLogout } from '../redux/actions';\nexport default {\n  // Gets all books\n  getBooks: function getBooks() {\n    return axiosP.get(\"/books\");\n  },\n  // Gets the book with the given id\n  getBook: function getBook(id) {\n    return axiosP.get(\"/books/\" + id);\n  },\n  // Deletes the book with the given id\n  deleteBook: function deleteBook(id) {\n    return axiosP.delete(\"/books/\" + id);\n  },\n  // Saves a book to the database\n  saveBook: function saveBook(bookData) {\n    return axiosP.post(\"/books\", bookData);\n  }\n};\nvar axiosP = axios.create({\n  baseURL: '/api/protected'\n}); // https://www.npmjs.com/package/axios#interceptors\n\naxiosP.interceptors.request.use(function _callee(config) {\n  var source, authHeader;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          source = axios.CancelToken.source();\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getAuthHeaderAsync());\n\n        case 4:\n          authHeader = _context.sent;\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](1);\n          store.dispatch(onLogout());\n          source.cancel(\"Request canceled: \".concat(_context.t0));\n          return _context.abrupt(\"return\", {\n            cancelToken: source.token\n          });\n\n        case 12:\n          config.headers = _objectSpread({}, config.headers, {}, authHeader);\n          return _context.abrupt(\"return\", config);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 7]]);\n});\n\nfunction getAuthHeaderAsync() {\n  var jot = new JotBrowser('jwt');\n  if (jot.getToken() && jot.valid()) return Promise.resolve(makeAuthHeader(jot));\n  var refreshJot = new JotBrowser('refreshJwt');\n  if (!refreshJot.getToken()) return Promise.reject('Refresh token not found on client.');\n  if (!refreshJot.valid()) return Promise.reject('Refresh token not valid on client.');\n  return axios.post(\"/api/auth/refresh\", {\n    token: refreshJot.getToken()\n  }).then(function (res) {\n    return res.data;\n  }).then(function (data) {\n    if (data.success) {\n      // save new tokens in localstorage\n      new JotBrowser('refreshJwt', data.tokens.refresh);\n\n      var _jot = new JotBrowser('jwt', data.tokens.user);\n\n      return makeAuthHeader(_jot);\n    } else {\n      return Promise.reject(data.errors.token);\n    }\n  });\n}\n\nfunction makeAuthHeader(jot) {\n  return {\n    Authorization: 'Bearer ' + jot.getToken()\n  };\n}","map":{"version":3,"sources":["C:/Users/BCWAHOO/WorkSpace/BootCamp/Session/wk21 - React/readinglist-with-jwt-auth/client/src/api/protectedAPI.js"],"names":["axios","Browser","JotBrowser","store","onLogout","getBooks","axiosP","get","getBook","id","deleteBook","delete","saveBook","bookData","post","create","baseURL","interceptors","request","use","config","source","CancelToken","getAuthHeaderAsync","authHeader","dispatch","cancel","cancelToken","token","headers","jot","getToken","valid","Promise","resolve","makeAuthHeader","refreshJot","reject","then","res","data","success","tokens","refresh","user","errors","Authorization"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { Browser as JotBrowser } from 'jwt-jot'\n\nimport store from '../redux/store';\nimport { onLogout } from '../redux/actions';\n\nexport default {\n    // Gets all books\n    getBooks: function () {\n        return axiosP.get(\"/books\");\n    },\n    // Gets the book with the given id\n    getBook: function (id) {\n        return axiosP.get(\"/books/\" + id);\n    },\n    // Deletes the book with the given id\n    deleteBook: function (id) {\n        return axiosP.delete(\"/books/\" + id);\n    },\n    // Saves a book to the database\n    saveBook: function (bookData) {\n        return axiosP.post(\"/books\", bookData);\n    }\n};\n\nconst axiosP = axios.create({\n    baseURL: '/api/protected'\n});\n\n// https://www.npmjs.com/package/axios#interceptors\naxiosP.interceptors.request.use(\n    async function (config) {\n        const source = axios.CancelToken.source();\n        let authHeader;\n        try {\n            authHeader = await getAuthHeaderAsync();\n        } catch (error) {\n            store.dispatch(onLogout());\n            source.cancel(`Request canceled: ${error}`);\n            return { cancelToken: source.token };\n        }\n\n        config.headers = {\n            ...config.headers,\n            ...authHeader\n        }\n\n        return config;\n    }\n);\n\nfunction getAuthHeaderAsync() {\n    const jot = new JotBrowser('jwt');\n\n    if (jot.getToken() && jot.valid()) return Promise.resolve(makeAuthHeader(jot));\n\n    const refreshJot = new JotBrowser('refreshJwt');\n\n    if (!refreshJot.getToken()) return Promise.reject('Refresh token not found on client.');\n    if (!refreshJot.valid()) return Promise.reject('Refresh token not valid on client.');\n\n    return axios.post(\"/api/auth/refresh\", { token: refreshJot.getToken() })\n        .then(res => res.data)\n        .then(data => {\n            if (data.success) {\n                // save new tokens in localstorage\n                new JotBrowser('refreshJwt', data.tokens.refresh);\n                const jot = new JotBrowser('jwt', data.tokens.user);\n                return makeAuthHeader(jot);\n            } else {\n                return Promise.reject(data.errors.token);\n            }\n        });\n}\n\nfunction makeAuthHeader(jot) {\n    return { Authorization: 'Bearer ' + jot.getToken() };\n}"]},"metadata":{},"sourceType":"module"}