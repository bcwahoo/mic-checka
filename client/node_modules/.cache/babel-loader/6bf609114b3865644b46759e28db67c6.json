{"ast":null,"code":"import { createStore } from \"redux\";\nimport rootReducer, { rootState } from \"./reducers\";\n/**\n * \n * @see {@link https://redux.js.org/api/createstore}\n */\n\nfunction configureStore(preloadedState) {\n  var store = createStore(rootReducer, preloadedState, // allowing our store to be enhanced by the redux devtools (with which we can do time-travel and state inspection)\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()); // Setting up hot module reloading for our reducers\n\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./reducers', function () {\n      return store.replaceReducer(rootReducer);\n    });\n  }\n\n  return store;\n}\n\nexport default configureStore(rootState);","map":{"version":3,"sources":["C:/Users/BCWAHOO/WorkSpace/BootCamp/Session/wk21 - React/readinglist-with-jwt-auth/client/src/redux/store.js"],"names":["createStore","rootReducer","rootState","configureStore","preloadedState","store","window","__REDUX_DEVTOOLS_EXTENSION__","process","env","NODE_ENV","module","hot","accept","replaceReducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,WAAP,IAAsBC,SAAtB,QAAuC,YAAvC;AAGA;;;;;AAIA,SAASC,cAAT,CAAwBC,cAAxB,EAAwC;AAEpC,MAAMC,KAAK,GAAGL,WAAW,CACrBC,WADqB,EAErBG,cAFqB,EAGrB;AACAE,EAAAA,MAAM,CAACC,4BAAP,IAAuCD,MAAM,CAACC,4BAAP,EAJlB,CAAzB,CAFoC,CAQpC;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,MAAM,CAACC,GAApD,EAAyD;AACrDD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,YAAlB,EAAgC;AAAA,aAAMR,KAAK,CAACS,cAAN,CAAqBb,WAArB,CAAN;AAAA,KAAhC;AACH;;AAED,SAAOI,KAAP;AACH;;AAED,eAAeF,cAAc,CAACD,SAAD,CAA7B","sourcesContent":["import { createStore } from \"redux\";\nimport rootReducer, { rootState } from \"./reducers\";\n\n\n/**\n * \n * @see {@link https://redux.js.org/api/createstore}\n */\nfunction configureStore(preloadedState) {\n\n    const store = createStore(\n        rootReducer,\n        preloadedState,\n        // allowing our store to be enhanced by the redux devtools (with which we can do time-travel and state inspection)\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n    // Setting up hot module reloading for our reducers\n    if (process.env.NODE_ENV !== 'production' && module.hot) {\n        module.hot.accept('./reducers', () => store.replaceReducer(rootReducer))\n    }\n\n    return store\n}\n\nexport default configureStore(rootState);"]},"metadata":{},"sourceType":"module"}