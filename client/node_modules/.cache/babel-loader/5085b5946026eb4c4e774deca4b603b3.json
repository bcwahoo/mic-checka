{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\BCWAHOO\\\\WorkSpace\\\\BootCamp\\\\Session\\\\wk21 - React\\\\readinglist-with-jwt-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n\n/**\n * Reducers specify how the application's state changes in response to actions sent to the store.\n * Remember that actions only describe what happened, but don't describe how the application's state changes.\n * @see {@link https://redux.js.org/basics/reducers}\n * \n */\nimport { Browser as JotBrowser } from 'jwt-jot';\nimport { LOGIN, LOGOUT } from \"../actionTypes\";\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOGIN:\n      {\n        new JotBrowser('jwt', action.payload.tokens.user);\n        new JotBrowser('refreshJwt', action.payload.tokens.refresh);\n        return _objectSpread({}, state, {\n          details: setUserDetails()\n        });\n      }\n\n    case LOGOUT:\n      {\n        // remove all tokens from local storage\n        var jot = new JotBrowser('jwt');\n        if (jot.getToken()) jot.eject();\n        var refreshJot = new JotBrowser('refreshJwt');\n        if (refreshJot.getToken()) refreshJot.eject();\n        return _objectSpread({}, state, {\n          details: setUserDetails()\n        });\n      }\n\n    default:\n      return _objectSpread({}, state, {\n        details: setUserDetails()\n      });\n  }\n}\n\nvar setUserDetails = function setUserDetails() {\n  var jot = new JotBrowser('jwt');\n  return jot.getToken() ? {\n    firstName: jot.getClaim('firstName'),\n    role: jot.getClaim('role'),\n    id: jot.getClaim('sub')\n  } : null;\n};\n\nexport var initialState = {\n  details: setUserDetails()\n};","map":{"version":3,"sources":["C:/Users/BCWAHOO/WorkSpace/BootCamp/Session/wk21 - React/readinglist-with-jwt-auth/client/src/redux/reducers/user.js"],"names":["Browser","JotBrowser","LOGIN","LOGOUT","state","initialState","action","type","payload","tokens","user","refresh","details","setUserDetails","jot","getToken","eject","refreshJot","firstName","getClaim","role","id"],"mappings":";;AAAA;;;;;;AAOA,SAASA,OAAO,IAAIC,UAApB,QAAsC,SAAtC;AAEA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,gBAA9B;AAEA,eAAe,YAAwC;AAAA,MAA9BC,KAA8B,uEAAtBC,YAAsB;AAAA,MAARC,MAAQ;;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKL,KAAL;AAAY;AACR,YAAID,UAAJ,CAAe,KAAf,EAAsBK,MAAM,CAACE,OAAP,CAAeC,MAAf,CAAsBC,IAA5C;AACA,YAAIT,UAAJ,CAAe,YAAf,EAA6BK,MAAM,CAACE,OAAP,CAAeC,MAAf,CAAsBE,OAAnD;AACA,iCACOP,KADP;AAEIQ,UAAAA,OAAO,EAAEC,cAAc;AAF3B;AAIH;;AACD,SAAKV,MAAL;AAAa;AACT;AACA,YAAMW,GAAG,GAAG,IAAIb,UAAJ,CAAe,KAAf,CAAZ;AACA,YAAIa,GAAG,CAACC,QAAJ,EAAJ,EAAoBD,GAAG,CAACE,KAAJ;AACpB,YAAMC,UAAU,GAAG,IAAIhB,UAAJ,CAAe,YAAf,CAAnB;AACA,YAAIgB,UAAU,CAACF,QAAX,EAAJ,EAA2BE,UAAU,CAACD,KAAX;AAE3B,iCACOZ,KADP;AAEIQ,UAAAA,OAAO,EAAEC,cAAc;AAF3B;AAIH;;AACD;AACI,+BACOT,KADP;AAEIQ,QAAAA,OAAO,EAAEC,cAAc;AAF3B;AAtBR;AA2BH;;AAED,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,MAAMC,GAAG,GAAG,IAAIb,UAAJ,CAAe,KAAf,CAAZ;AACA,SAAOa,GAAG,CAACC,QAAJ,KACH;AACIG,IAAAA,SAAS,EAAEJ,GAAG,CAACK,QAAJ,CAAa,WAAb,CADf;AAEIC,IAAAA,IAAI,EAAEN,GAAG,CAACK,QAAJ,CAAa,MAAb,CAFV;AAGIE,IAAAA,EAAE,EAAEP,GAAG,CAACK,QAAJ,CAAa,KAAb;AAHR,GADG,GAMH,IANJ;AAOH,CATD;;AAUA,OAAO,IAAMd,YAAY,GAAG;AACxBO,EAAAA,OAAO,EAAEC,cAAc;AADC,CAArB","sourcesContent":["/**\n * Reducers specify how the application's state changes in response to actions sent to the store.\n * Remember that actions only describe what happened, but don't describe how the application's state changes.\n * @see {@link https://redux.js.org/basics/reducers}\n * \n */\n\nimport { Browser as JotBrowser } from 'jwt-jot'\n\nimport { LOGIN, LOGOUT } from \"../actionTypes\";\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case LOGIN: {\n            new JotBrowser('jwt', action.payload.tokens.user);\n            new JotBrowser('refreshJwt', action.payload.tokens.refresh);\n            return {\n                ...state,\n                details: setUserDetails()\n            };\n        }\n        case LOGOUT: {\n            // remove all tokens from local storage\n            const jot = new JotBrowser('jwt');\n            if (jot.getToken()) jot.eject();\n            const refreshJot = new JotBrowser('refreshJwt');\n            if (refreshJot.getToken()) refreshJot.eject();\n\n            return {\n                ...state,\n                details: setUserDetails()\n            };\n        }\n        default:\n            return {\n                ...state,\n                details: setUserDetails()\n            };\n    }\n}\n\nconst setUserDetails = () => {\n    const jot = new JotBrowser('jwt');\n    return jot.getToken() ?\n        {\n            firstName: jot.getClaim('firstName'),\n            role: jot.getClaim('role'),\n            id: jot.getClaim('sub')\n        } :\n        null;\n}\nexport const initialState = {\n    details: setUserDetails()\n};"]},"metadata":{},"sourceType":"module"}